/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 ./public/models/dog/doggo.glb 
*/

import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useControls } from "leva";
import useDog from "./store/useDog";
import { useFrame } from "@react-three/fiber";
import { useKeyboardControls } from "@react-three/drei";

export function Doggo(props) {
  const [subscribeKeys, getKeys] = useKeyboardControls();

  const dogActiveAnim = useDog((state) => state.dogActiveAnim);
  const run = useDog((state) => state.dogRun);
  const runLeft = useDog((state) => state.dogRunLeft);
  const runRight = useDog((state) => state.dogRunRight);
  const idle = useDog((state) => state.dogIdle);

  const sit = useDog((state) => state.dogSit);

  console.log(dogActiveAnim);

  const group = useRef();
  const { nodes, materials, animations } = useGLTF(
    "./models/dog/doggo_actions_all.glb"
  );
  const { actions, names } = useAnimations(animations, group);

  useFrame(() => {
    const { forward, backward, leftward, rightward } = getKeys();

    // if (!forward && !backward && !leftward && !rightward) {
    //   sit()
    // }
    if (forward || backward || leftward || rightward) {

      if (forward) {run()}
      if (backward) {sit()}
      if (forward && leftward) {runLeft()}
      if (forward && rightward) {runRight()}

    } else {
      idle();
    }
  });

  /*
  39 - Idle
  40 - Idle Looking
  51 - Jump
  57 - Flying
  59 - Laying Wagging
  61 - Laying Sleep
  66 - Laying Active
  72 - Pick Up
  73 - Pick Up Idle
  75 - Put Down
  76 - Run Forward
  78 - Run Left
  80 - Run Right
  83 - Sitting
  84 - Sitting Looking
  94 - Flying
  105 - Trot
  107 - Trot Left
  109 - Trot Right
  119 - Walk Back
  122 - Walk Forward
  124 - Walk Left
  126 - Walk Right
  */

  useEffect(() => {
    actions[names[dogActiveAnim]].reset().fadeIn(0.5).play();
    return () => {
      actions[names[dogActiveAnim]].fadeOut(0.5);
    };
  }, [dogActiveAnim]);

  return (
    <group scale={0.02} ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Arm_Labrador" scale={100}>
          <primitive object={nodes.Root_bone} />
          <skinnedMesh
            castShadow
            name="Labardor"
            geometry={nodes.Labardor.geometry}
            material={materials["Material.001"]}
            skeleton={nodes.Labardor.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("./models/dog/doggo_actions_all.glb");
